kubectl get nodes # get nodes

kubectl get deploy  # get deployments

kubectl get pods    # get pods

kubectl get svc     # get services

kubectl get cm      # get configmaps

kubectl get ns      # get namespaces

kubectl get crd     # get custom resource definitions

kubectl get rc      # get replication controller

kubectl get rs      # get replicaset

kubectl get ds      # get daemonset 

kubectl get jobs    # get jobs (batch job;terminate once finished)

kubectl get cronjob # get cronjobs(scheduled jobs)

kubectl get all     # get all

kubectl get all --all-namespaces

kubectl get pods --selector app=nginx, tier=front-end # get pods through the use of lables and selectors

--------------------------------------------------------------------

kubectl proxy pod pod-id --port 8080   # proxy pod to the specified port

kubectl port-forward pod-id 8080:80    # port forward container port 80 to host port 8080

--------------------------------------------------------------------

kubectl delete deploy some-deploy   # delete deployment

kubectl delete pod samplepod    # delete pod

kubectl delete svc some-service # delete service

--------------------------------------------------------------------

kubectl get pod pod-id -o yaml > pod-def.yaml

kubectl edit pod pod-id                 #edit pod


--------------------------------------------------------------------

kubectl scale rs rep-set --replicas=2

kubectl scale  --replicas=1 -f rep-set.yml

kubectl scale --replicas=1 deploy my-deployment


---------------------------------------------------------------------

kubectl create -f pod-def.yml   # create resource of kind

kubectl replace -f pod-def.yml  # replace the existing resource with updated details

kubectl apply -f some-yml   # apply some yaml to existing yml

kubectl run nginx --image=nginx

kubectl create deployment --image=nginx nginx

kubectl create deployment nginx --image=nginx -o yaml > nginx-deployment.yaml

----------------------------------------------------------------------

kubectl <command> -o yaml/json/wide/name # outputs

----------------------------------------------------------------------

kubectl config set-context $(kubectl config current-context) --namespace=abhilash   # set namespace


----------------------------------------------------------------------

kubectl create configmap <somecm-name> --from-literal=<key>=<value>

kubectl create secret <somesecret-name> --from-literal=<key>=<value>

kubectl create configmap <somecm-name> --from-file=file.properties

kubectl create secret <somesecret-name> --from-file=file.properties

-----------------------------------------------------------------------

kubectl taint node <node-name> key=value:taint-effect(NoSchedule,PreferNoSchedule,NoExecute)

kubectl taint node master taint-effect-

-----------------------------------------------------------------------

kubectl explain pod --recursive | less

kubectl explain pod --recursive | grep -A5 keyword

-----------------------------------------------------------------------

kubectl label node node-name key=value # for nodeselector-nodeaffinity

kubectl get pods --selector key=value or kubectl get pods -l key=value

kubectl get pods --show-labels

kubectl get pods -l key=value --no-headers | wc -l

-----------------------------------------------------------------------

kubectl rollout status deploy deployment

kubectl rollout history deploy deployment

kubectl rollout undo deploy deployment

kubectl set image deployment nginx=nginx:1.16

kubectl rollout history deployment nginx --revision=1

kubectl set image deployment nginx nginx=nginx:1.17 --record

-----------------------------------------------------------------------

kubectl logs -f nginx     # live logs for pod with one container

kubectl logs -f nginx help-container  # live logs for pod with specific container running inside the pod

-----------------------------------------------------------------------
echo -n "sometext" | base64

echo cm9vdA== | base64 --decode      #base64 encode and decode for secrets

------------------------------------------------------------------------

kubectl create secret docker-registry registrycreds --docker-server=https://index.docker.io/v1/ --docker-username=user --docker-password=password --docker-email=abc-xyz@gmail.com  

------------------------------------------------------------------------

kubectl create token service-account-name  # with 1.24, service account doesnt get created with secret and non expiry token.

------------------------------------------------------------------------

kind: v1    Pod, ReplicationController, Service, NodeSelector, NodeAffinity
      app/v1    Deployment, ReplicaSet, DaemonSet
      batch/v1  Job
      batch/v1beta1 CronJob
